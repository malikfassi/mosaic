name: Pixel Canvas CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      coloring: ${{ steps.filter.outputs.coloring }}
      nft: ${{ steps.filter.outputs.nft }}
      frontend_needs_run: ${{ steps.check-runs.outputs.frontend_needs_run }}
      coloring_needs_run: ${{ steps.check-runs.outputs.coloring_needs_run }}
      nft_needs_run: ${{ steps.check-runs.outputs.nft_needs_run }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            coloring:
              - 'contracts/pixel-nft/contracts/coloring/**'
              - 'contracts/pixel-nft/Cargo.toml'
            nft:
              - 'contracts/pixel-nft/contracts/sg721-pixel/**'
              - 'contracts/pixel-nft/Cargo.toml'

      - name: Check previous workflow runs
        id: check-runs
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Function to check if a job has ever succeeded for current commit
          check_job_success() {
            local job_name=$1
            local success=false
            
            # Get last successful run for the job on current commit
            gh run list --workflow pixel-canvas.yml \
              --json conclusion,jobs,headSha \
              --jq ".[] | select(.headSha == \"${{ github.sha }}\" and .jobs[].name == \"$job_name\" and .conclusion == \"success\") | .jobs[].name" \
              --limit 100 | grep -q "$job_name" && success=true
            
            echo $success
          }
          
          # Check each component
          frontend_success=$(check_job_success "frontend-ci")
          nft_success=$(check_job_success "nft-ci")
          coloring_success=$(check_job_success "coloring-ci")
          
          # A component needs to run if it either has changes or never succeeded for current commit
          echo "frontend_needs_run=$([ "${{ steps.filter.outputs.frontend }}" == "true" ] || [ "$frontend_success" == "false" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "nft_needs_run=$([ "${{ steps.filter.outputs.nft }}" == "true" ] || [ "$nft_success" == "false" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT
          echo "coloring_needs_run=$([ "${{ steps.filter.outputs.coloring }}" == "true" ] || [ "$coloring_success" == "false" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

  frontend-ci:
    needs: changes
    if: needs.changes.outputs.frontend_needs_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: cd frontend && npm ci
      - name: Run linting
        run: cd frontend && npm run lint
      - name: Run tests
        run: cd frontend && npm test
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: frontend-ci.json
          label: frontend
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}
      - name: Collect logs
        if: failure()
        run: |
          mkdir -p logs/frontend
          cp frontend/npm-debug.log* logs/frontend/ || true
          cp frontend/.next/error.log logs/frontend/ || true
          tar czf frontend-logs.tar.gz logs/
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-logs
          path: frontend-logs.tar.gz

  coloring-ci:
    needs: changes
    if: needs.changes.outputs.coloring_needs_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Run tests
        run: |
          cd contracts/pixel-nft
          cargo test -p coloring
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: coloring-ci.json
          label: coloring
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}
      - name: Collect logs
        if: failure()
        run: |
          mkdir -p logs/coloring
          cp contracts/pixel-nft/target/debug/deps/*.stderr logs/coloring/ || true
          tar czf coloring-logs.tar.gz logs/
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: coloring-logs
          path: coloring-logs.tar.gz

  nft-ci:
    needs: changes
    if: needs.changes.outputs.nft_needs_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Run tests
        run: |
          cd contracts/pixel-nft
          cargo test -p sg721-pixel
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: nft-ci.json
          label: nft
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}
      - name: Collect logs
        if: failure()
        run: |
          mkdir -p logs/nft
          cp contracts/pixel-nft/target/debug/deps/*.stderr logs/nft/ || true
          tar czf nft-logs.tar.gz logs/
      - name: Upload logs
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: nft-logs
          path: nft-logs.tar.gz

  deploy-coloring:
    needs: [changes, coloring-ci]
    if: needs.changes.outputs.coloring == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy coloring contract
        run: echo "Deploying coloring contract..."
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: deploy-coloring.json
          label: deploy-coloring
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}

  deploy-nft:
    needs: [changes, nft-ci]
    if: needs.changes.outputs.nft == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Deploy NFT contract
        run: echo "Deploying NFT contract..."
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: deploy-nft.json
          label: deploy-nft
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}

  coloring-e2e:
    needs: [changes, deploy-coloring]
    if: needs.changes.outputs.coloring == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run E2E tests for coloring contract
        run: echo "Running coloring contract E2E tests..."
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: coloring-e2e.json
          label: coloring-e2e
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}

  nft-e2e:
    needs: [changes, deploy-nft]
    if: needs.changes.outputs.nft == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run E2E tests for NFT contract
        run: echo "Running NFT contract E2E tests..."
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: nft-e2e.json
          label: nft-e2e
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}

  full-e2e:
    needs: [changes, coloring-e2e, nft-e2e]
    if: (needs.changes.outputs.coloring == 'true' || needs.changes.outputs.nft == 'true') && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run full E2E test suite
        run: echo "Running full E2E test suite..."
      - name: Generate badge
        uses: schneegans/dynamic-badges-action@v1.6.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: full-e2e.json
          label: full-e2e
          message: ${{ job.status }}
          color: ${{ job.status == 'success' && 'success' || 'critical' }}

  notify:
    needs: [frontend-ci, coloring-ci, nft-ci, deploy-coloring, deploy-nft, coloring-e2e, nft-e2e, full-e2e]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Get skip reasons
        id: skip-reasons
        run: |
          # Function to get skip reason
          get_skip_reason() {
            local job_name=$1
            local needs_run=$2
            local is_main=${{ github.ref == 'refs/heads/main' }}
            
            if [[ "${{ needs.changes.outputs[needs_run] }}" != "true" ]]; then
              echo "No changes detected"
            elif [[ "$job_name" =~ ^deploy || "$job_name" =~ e2e$ ]] && [[ "$is_main" != "true" ]]; then
              echo "Not on main branch"
            else
              echo "Unknown reason"
            fi
          }
          
          # Get reasons for each job
          echo "frontend=$([ "${{ needs.frontend-ci.result }}" == "skipped" ] && get_skip_reason "frontend-ci" "frontend_needs_run" || echo "")" >> $GITHUB_OUTPUT
          echo "coloring=$([ "${{ needs.coloring-ci.result }}" == "skipped" ] && get_skip_reason "coloring-ci" "coloring_needs_run" || echo "")" >> $GITHUB_OUTPUT
          echo "nft=$([ "${{ needs.nft-ci.result }}" == "skipped" ] && get_skip_reason "nft-ci" "nft_needs_run" || echo "")" >> $GITHUB_OUTPUT
          echo "deploy_coloring=$([ "${{ needs.deploy-coloring.result }}" == "skipped" ] && get_skip_reason "deploy-coloring" "coloring" || echo "")" >> $GITHUB_OUTPUT
          echo "deploy_nft=$([ "${{ needs.deploy-nft.result }}" == "skipped" ] && get_skip_reason "deploy-nft" "nft" || echo "")" >> $GITHUB_OUTPUT
          echo "coloring_e2e=$([ "${{ needs.coloring-e2e.result }}" == "skipped" ] && get_skip_reason "coloring-e2e" "coloring" || echo "")" >> $GITHUB_OUTPUT
          echo "nft_e2e=$([ "${{ needs.nft-e2e.result }}" == "skipped" ] && get_skip_reason "nft-e2e" "nft" || echo "")" >> $GITHUB_OUTPUT
          echo "full_e2e=$([ "${{ needs.full-e2e.result }}" == "skipped" ] && get_skip_reason "full-e2e" "nft" || echo "")" >> $GITHUB_OUTPUT

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          title: "Pixel Canvas CI/CD Status"
          description: |
            **Commit:** ${{ github.sha }}
            **Branch:** ${{ github.ref }}
            **Author:** ${{ github.actor }}
            
            **CI Jobs:**
            • Frontend: ${{ needs.frontend-ci.result || 'skipped' }} ${{ steps.skip-reasons.outputs.frontend != '' && format('(Reason: {0})', steps.skip-reasons.outputs.frontend) || '' }}
            • Coloring: ${{ needs.coloring-ci.result || 'skipped' }} ${{ steps.skip-reasons.outputs.coloring != '' && format('(Reason: {0})', steps.skip-reasons.outputs.coloring) || '' }}
            • NFT: ${{ needs.nft-ci.result || 'skipped' }} ${{ steps.skip-reasons.outputs.nft != '' && format('(Reason: {0})', steps.skip-reasons.outputs.nft) || '' }}
            
            **Deployments:**
            • Coloring: ${{ needs.deploy-coloring.result || 'skipped' }} ${{ steps.skip-reasons.outputs.deploy_coloring != '' && format('(Reason: {0})', steps.skip-reasons.outputs.deploy_coloring) || '' }}
            • NFT: ${{ needs.deploy-nft.result || 'skipped' }} ${{ steps.skip-reasons.outputs.deploy_nft != '' && format('(Reason: {0})', steps.skip-reasons.outputs.deploy_nft) || '' }}
            
            **E2E Tests:**
            • Coloring: ${{ needs.coloring-e2e.result || 'skipped' }} ${{ steps.skip-reasons.outputs.coloring_e2e != '' && format('(Reason: {0})', steps.skip-reasons.outputs.coloring_e2e) || '' }}
            • NFT: ${{ needs.nft-e2e.result || 'skipped' }} ${{ steps.skip-reasons.outputs.nft_e2e != '' && format('(Reason: {0})', steps.skip-reasons.outputs.nft_e2e) || '' }}
            • Full: ${{ needs.full-e2e.result || 'skipped' }} ${{ steps.skip-reasons.outputs.full_e2e != '' && format('(Reason: {0})', steps.skip-reasons.outputs.full_e2e) || '' }}
            
            **Status Badges:**
            - Frontend: ![Frontend](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.repository_owner }}/${{ secrets.BADGE_GIST_ID }}/raw/frontend-ci.json)
            - Coloring: ![Coloring](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.repository_owner }}/${{ secrets.BADGE_GIST_ID }}/raw/coloring-ci.json)
            - NFT: ![NFT](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.repository_owner }}/${{ secrets.BADGE_GIST_ID }}/raw/nft-ci.json)
            
            **Logs:** Check the artifacts in the workflow run for any failed jobs.
          color: ${{ contains(needs.*.result, 'failure') && 0xFF0000 || 0x00FF00 }}
          username: Pixel Canvas Bot
          avatar_url: https://github.com/pixel-canvas.png