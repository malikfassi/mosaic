name: Pixel Canvas CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'contracts/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'contracts/**'
  workflow_dispatch:
    inputs:
      deploy_nft:
        description: 'Deploy NFT contract'
        type: boolean
        default: false
      deploy_coloring:
        description: 'Deploy coloring contract'
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  STARGAZE_RPC: "https://rpc.elgafar-1.stargaze-apis.com"
  STARGAZE_CHAIN_ID: "elgafar-1"
  GAS_PRICE: "0.025ustars"

jobs:
  # Track file changes
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.filter.outputs.frontend }}
      nft: ${{ steps.filter.outputs.nft }}
      coloring: ${{ steps.filter.outputs.coloring }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            nft:
              - 'contracts/sg721-pixel/**'
            coloring:
              - 'contracts/pixel-coloring/**'

  # A1: Frontend static validation and unit tests
  frontend-ci:
    needs: changes
    if: needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Run static validation
        working-directory: frontend
        run: |
          npm run lint
          npm run typecheck
      
      - name: Run unit tests
        working-directory: frontend
        run: npm test

  # A2: NFT contract static validation and unit tests
  nft-ci:
    needs: changes
    if: needs.changes.outputs.nft == 'true'
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.tests.outputs.success }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-nft-${{ hashFiles('contracts/sg721-pixel/**/Cargo.lock') }}
      
      - name: Run static validation
        working-directory: contracts/sg721-pixel
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features
      
      - id: tests
        name: Run unit tests
        working-directory: contracts/sg721-pixel
        run: |
          cargo test --verbose --all-features
          echo "success=true" >> $GITHUB_OUTPUT

  # B: Manual NFT contract deployment
  deploy-nft:
    needs: [changes, nft-ci]
    if: |
      github.event_name == 'workflow_dispatch' &&
      inputs.deploy_nft == true &&
      needs.nft-ci.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    environment: testnet
    outputs:
      code_id: ${{ steps.deploy.outputs.code_id }}
      contract_addr: ${{ steps.deploy.outputs.contract_addr }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Build contract
        working-directory: contracts/sg721-pixel
        run: |
          cargo wasm
          cargo run-script optimize
      
      - name: Setup deployment
        run: |
          echo "${{ secrets.TESTNET_MNEMONIC }}" > deployer.txt
          chmod 600 deployer.txt
      
      - id: deploy
        name: Deploy contract
        run: |
          CODE_ID=$(starsd tx wasm store artifacts/sg721_pixel.wasm \
            --from deployer.txt \
            --gas-prices $GAS_PRICE \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            -y --output json | jq -r '.logs[0].events[0].attributes[0].value')
          
          echo "code_id=$CODE_ID" >> $GITHUB_OUTPUT
          
          CONTRACT_ADDR=$(starsd tx wasm instantiate $CODE_ID '{"name":"Pixel NFT","symbol":"PIXEL"}' \
            --from deployer.txt \
            --label "Pixel NFT Collection" \
            --gas-prices $GAS_PRICE \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            -y --output json | jq -r '.logs[0].events[1].attributes[0].value')
          
          echo "contract_addr=$CONTRACT_ADDR" >> $GITHUB_OUTPUT
      
      - name: Create contract address PR
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "chore: update NFT contract address"
          title: "Update NFT contract address"
          body: |
            Updates NFT contract address after deployment:
            - Code ID: ${{ steps.deploy.outputs.code_id }}
            - Contract Address: ${{ steps.deploy.outputs.contract_addr }}
          branch: update-nft-contract-address
          delete-branch: true
          labels: |
            automated pr
            contract deployment

  # A2-1: NFT contract E2E tests (if previously deployed)
  nft-e2e:
    needs: [changes, nft-ci, deploy-nft]
    if: |
      needs.changes.outputs.nft == 'true' &&
      needs.nft-ci.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test wallet
        id: wallet
        run: |
          TEST_WALLET=$(starsd keys add test-wallet --output json)
          echo "address=$(echo $TEST_WALLET | jq -r .address)" >> $GITHUB_OUTPUT
          echo "mnemonic=$(echo $TEST_WALLET | jq -r .mnemonic)" >> $GITHUB_ENV
      
      - name: Fund test wallet
        run: |
          curl -X POST -d '{"address": "${{ steps.wallet.outputs.address }}"}' \
            https://faucet.elgafar-1.stargaze-apis.com/claim
          sleep 10
      
      - name: Run E2E tests
        env:
          CONTRACT_ADDR: ${{ needs.deploy-nft.outputs.contract_addr }}
        run: |
          cd contracts/sg721-pixel/tests/e2e
          cargo test --test e2e -- --nocapture
      
      - name: Return unused funds
        if: always()
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.address }} \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[0].amount')
          
          if [ "$BALANCE" -gt "10000" ]; then
            starsd tx bank send test-wallet \
              stars1k8c2m5cn322akk5wy8lpt87dd2f4yh9azg7dtq \
              $(($BALANCE - 10000))ustars \
              --from test-wallet \
              --gas-prices $GAS_PRICE \
              --node $STARGAZE_RPC \
              --chain-id $STARGAZE_CHAIN_ID -y
          fi

  # A3: Coloring contract static validation and unit tests
  coloring-ci:
    needs: changes
    if: needs.changes.outputs.coloring == 'true'
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.tests.outputs.success }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-coloring-${{ hashFiles('contracts/pixel-coloring/**/Cargo.lock') }}
      
      - name: Run static validation
        working-directory: contracts/pixel-coloring
        run: |
          cargo fmt -- --check
          cargo clippy --all-targets --all-features
      
      - id: tests
        name: Run unit tests
        working-directory: contracts/pixel-coloring
        run: |
          cargo test --verbose --all-features
          echo "success=true" >> $GITHUB_OUTPUT

  # C: Manual coloring contract deployment
  deploy-coloring:
    needs: [changes, coloring-ci]
    if: |
      github.event_name == 'workflow_dispatch' &&
      inputs.deploy_coloring == true &&
      needs.coloring-ci.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    environment: testnet
    outputs:
      code_id: ${{ steps.deploy.outputs.code_id }}
      contract_addr: ${{ steps.deploy.outputs.contract_addr }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Build contract
        working-directory: contracts/pixel-coloring
        run: |
          cargo wasm
          cargo run-script optimize
      
      - name: Setup deployment
        run: |
          echo "${{ secrets.TESTNET_MNEMONIC }}" > deployer.txt
          chmod 600 deployer.txt
      
      - id: deploy
        name: Deploy contract
        run: |
          CODE_ID=$(starsd tx wasm store artifacts/pixel_coloring.wasm \
            --from deployer.txt \
            --gas-prices $GAS_PRICE \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            -y --output json | jq -r '.logs[0].events[0].attributes[0].value')
          
          echo "code_id=$CODE_ID" >> $GITHUB_OUTPUT
          
          CONTRACT_ADDR=$(starsd tx wasm instantiate $CODE_ID '{"nft_contract":"${{ needs.deploy-nft.outputs.contract_addr }}"}' \
            --from deployer.txt \
            --label "Pixel Coloring Contract" \
            --gas-prices $GAS_PRICE \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            -y --output json | jq -r '.logs[0].events[1].attributes[0].value')
          
          echo "contract_addr=$CONTRACT_ADDR" >> $GITHUB_OUTPUT
      
      - name: Create contract address PR
        uses: peter-evans/create-pull-request@v5
        with:
          commit-message: "chore: update coloring contract address"
          title: "Update coloring contract address"
          body: |
            Updates coloring contract address after deployment:
            - Code ID: ${{ steps.deploy.outputs.code_id }}
            - Contract Address: ${{ steps.deploy.outputs.contract_addr }}
          branch: update-coloring-contract-address
          delete-branch: true
          labels: |
            automated pr
            contract deployment

  # A3-1: Coloring contract E2E tests (if previously deployed)
  coloring-e2e:
    needs: [changes, coloring-ci, deploy-coloring]
    if: |
      needs.changes.outputs.coloring == 'true' &&
      needs.coloring-ci.outputs.tests_passed == 'true'
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test wallet
        id: wallet
        run: |
          TEST_WALLET=$(starsd keys add test-wallet --output json)
          echo "address=$(echo $TEST_WALLET | jq -r .address)" >> $GITHUB_OUTPUT
          echo "mnemonic=$(echo $TEST_WALLET | jq -r .mnemonic)" >> $GITHUB_ENV
      
      - name: Fund test wallet
        run: |
          curl -X POST -d '{"address": "${{ steps.wallet.outputs.address }}"}' \
            https://faucet.elgafar-1.stargaze-apis.com/claim
          sleep 10
      
      - name: Run E2E tests
        env:
          NFT_CONTRACT: ${{ needs.deploy-nft.outputs.contract_addr }}
          COLORING_CONTRACT: ${{ needs.deploy-coloring.outputs.contract_addr }}
        run: |
          cd contracts/pixel-coloring/tests/e2e
          cargo test --test e2e -- --nocapture
      
      - name: Return unused funds
        if: always()
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.address }} \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[0].amount')
          
          if [ "$BALANCE" -gt "10000" ]; then
            starsd tx bank send test-wallet \
              stars1k8c2m5cn322akk5wy8lpt87dd2f4yh9azg7dtq \
              $(($BALANCE - 10000))ustars \
              --from test-wallet \
              --gas-prices $GAS_PRICE \
              --node $STARGAZE_RPC \
              --chain-id $STARGAZE_CHAIN_ID -y
          fi

  # Full E2E with frontend
  full-e2e:
    needs: [frontend-ci, nft-e2e, coloring-e2e]
    if: |
      needs.frontend-ci.result == 'success' &&
      needs.nft-e2e.result == 'success' &&
      needs.coloring-e2e.result == 'success'
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        working-directory: frontend
        run: npm ci
      
      - name: Setup test wallet
        id: wallet
        run: |
          TEST_WALLET=$(starsd keys add test-wallet --output json)
          echo "address=$(echo $TEST_WALLET | jq -r .address)" >> $GITHUB_OUTPUT
          echo "mnemonic=$(echo $TEST_WALLET | jq -r .mnemonic)" >> $GITHUB_ENV
      
      - name: Fund test wallet
        run: |
          curl -X POST -d '{"address": "${{ steps.wallet.outputs.address }}"}' \
            https://faucet.elgafar-1.stargaze-apis.com/claim
          sleep 10
      
      - name: Start frontend
        working-directory: frontend
        env:
          NEXT_PUBLIC_NFT_CONTRACT: ${{ needs.deploy-nft.outputs.contract_addr }}
          NEXT_PUBLIC_COLORING_CONTRACT: ${{ needs.deploy-coloring.outputs.contract_addr }}
        run: npm run dev &
      
      - name: Run Playwright tests
        working-directory: frontend
        env:
          NFT_CONTRACT: ${{ needs.deploy-nft.outputs.contract_addr }}
          COLORING_CONTRACT: ${{ needs.deploy-coloring.outputs.contract_addr }}
          TEST_WALLET_MNEMONIC: ${{ env.mnemonic }}
        run: npm run test:e2e
      
      - name: Return unused funds
        if: always()
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.address }} \
            --node $STARGAZE_RPC \
            --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[0].amount')
          
          if [ "$BALANCE" -gt "10000" ]; then
            starsd tx bank send test-wallet \
              stars1k8c2m5cn322akk5wy8lpt87dd2f4yh9azg7dtq \
              $(($BALANCE - 10000))ustars \
              --from test-wallet \
              --gas-prices $GAS_PRICE \
              --node $STARGAZE_RPC \
              --chain-id $STARGAZE_CHAIN_ID -y
          fi 