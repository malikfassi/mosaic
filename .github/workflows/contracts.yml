name: Contracts

on:
  push:
    paths:
      - 'contracts/**'
  pull_request:
    paths:
      - 'contracts/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'testnet'
        type: choice
        options:
          - testnet
          - mainnet

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  # Testnet configuration (used for all CI/testing)
  STARGAZE_RPC: "https://rpc.elgafar-1.stargaze-apis.com"
  STARGAZE_CHAIN_ID: "elgafar-1"
  STARGAZE_DENOM: "ustars"
  GAS_PRICE: "0.025ustars"
  # Only used for manual deployments
  STARGAZE_MAINNET_RPC: "https://stargaze-rpc.polkachu.com"
  STARGAZE_MAINNET_CHAIN_ID: "stargaze-1"

jobs:
  # Build and test all contracts
  build-contracts:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build NFT contract
        run: |
          cd contracts/pixel-nft/contracts/sg721-pixel
          cargo fmt -- --check
          cargo clippy --all-targets --all-features
          cargo test --verbose --all-features
          cargo wasm
          
          echo "::notice::NFT contract built successfully"
      
      - name: Build coloring contract
        run: |
          cd contracts/pixel-nft/contracts/coloring
          cargo fmt -- --check
          cargo clippy --all-targets --all-features
          cargo test --verbose --all-features
          cargo wasm
          
          echo "::notice::Coloring contract built successfully"
      
      - name: Upload NFT contract artifact
        uses: actions/upload-artifact@v3
        with:
          name: nft-contract
          path: contracts/pixel-nft/contracts/sg721-pixel/artifacts/*.wasm
          retention-days: 1
      
      - name: Upload coloring contract artifact
        uses: actions/upload-artifact@v3
        with:
          name: coloring-contract
          path: contracts/pixel-nft/contracts/coloring/artifacts/*.wasm
          retention-days: 1

  # Contract E2E tests on testnet
  contract-e2e:
    needs: [build-contracts]
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - uses: actions/checkout@v4
      
      - name: Download contract artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: List artifacts
        run: |
          echo "Downloaded artifacts:"
          ls -R artifacts/
      
      - name: Setup Go for starsd
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - name: Install starsd
        run: |
          git clone https://github.com/public-awesome/stargaze
          cd stargaze
          make install
          starsd version
      
      - name: Generate test wallet
        id: wallet
        run: |
          KEY_OUTPUT=$(starsd keys add test-wallet --output json)
          echo "ADDRESS=$(echo $KEY_OUTPUT | jq -r .address)" >> $GITHUB_OUTPUT
          echo "MNEMONIC=$(echo $KEY_OUTPUT | jq -r .mnemonic)" >> $GITHUB_ENV
          
          # Save wallet info for Discord notification
          echo "$MNEMONIC" > test-wallet.txt
          echo "::notice::Created test wallet: ${{ steps.wallet.outputs.ADDRESS }}"
      
      - name: Upload test wallet info
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts
          path: test-wallet.txt
          retention-days: 1
      
      - name: Request testnet funds
        run: |
          curl -X POST -d '{"address": "${{ steps.wallet.outputs.ADDRESS }}"}' \
            https://faucet.elgafar-1.stargaze-apis.com/claim
          
          # Wait for transaction to be processed
          sleep 10
      
      - name: Verify balance
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.ADDRESS }} \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -lt "1000000" ]; then
            echo "::error::Insufficient balance for testing: $BALANCE ustars"
            exit 1
          fi
          echo "::notice::Test wallet funded with $BALANCE ustars"
      
      - name: Store NFT contract
        id: store-nft
        run: |
          NFT_WASM=$(find artifacts/nft-contract -name "*.wasm" | head -n 1)
          if [ ! -f "$NFT_WASM" ]; then
            echo "::error::NFT contract WASM file not found"
            exit 1
          fi
          
          TX_OUTPUT=$(starsd tx wasm store "$NFT_WASM" \
            --from test-wallet --gas-prices $GAS_PRICE --gas auto --gas-adjustment 1.3 \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            -y --output json)
          
          CODE_ID=$(echo $TX_OUTPUT | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "CODE_ID=$CODE_ID" >> $GITHUB_OUTPUT
          echo "::notice::NFT contract stored with code ID: $CODE_ID"
      
      - name: Store coloring contract
        id: store-coloring
        run: |
          COLOR_WASM=$(find artifacts/coloring-contract -name "*.wasm" | head -n 1)
          if [ ! -f "$COLOR_WASM" ]; then
            echo "::error::Coloring contract WASM file not found"
            exit 1
          fi
          
          TX_OUTPUT=$(starsd tx wasm store "$COLOR_WASM" \
            --from test-wallet --gas-prices $GAS_PRICE --gas auto --gas-adjustment 1.3 \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            -y --output json)
          
          CODE_ID=$(echo $TX_OUTPUT | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "CODE_ID=$CODE_ID" >> $GITHUB_OUTPUT
          echo "::notice::Coloring contract stored with code ID: $CODE_ID"
      
      - name: Run E2E tests
        run: |
          cd contracts/pixel-nft/tests/e2e
          NFT_CODE_ID=${{ steps.store-nft.outputs.CODE_ID }} \
          COLORING_CODE_ID=${{ steps.store-coloring.outputs.CODE_ID }} \
          WALLET_MNEMONIC=$MNEMONIC \
          STARGAZE_RPC=$STARGAZE_RPC \
          STARGAZE_CHAIN_ID=$STARGAZE_CHAIN_ID \
          cargo test --test e2e -- --nocapture
      
      - name: Return unused funds
        if: always()
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.ADDRESS }} \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -gt "10000" ]; then
            starsd tx bank send test-wallet \
              stars1k8c2m5cn322akk5wy8lpt87dd2f4yh9azg7dtq \
              $(($BALANCE - 10000))ustars \
              --from test-wallet --gas-prices $GAS_PRICE \
              --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID -y
            echo "::notice::Returned $(($BALANCE - 10000)) ustars"
          fi

  # Manual deployment job (testnet or mainnet)
  deploy:
    needs: [contract-e2e]
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Setup environment
        run: |
          if [ "${{ github.event.inputs.environment }}" = "mainnet" ]; then
            echo "RPC_URL=$STARGAZE_MAINNET_RPC" >> $GITHUB_ENV
            echo "CHAIN_ID=$STARGAZE_MAINNET_CHAIN_ID" >> $GITHUB_ENV
            echo "MNEMONIC=${{ secrets.MAINNET_MNEMONIC }}" >> $GITHUB_ENV
          else
            echo "RPC_URL=$STARGAZE_RPC" >> $GITHUB_ENV
            echo "CHAIN_ID=$STARGAZE_CHAIN_ID" >> $GITHUB_ENV
            echo "MNEMONIC=${{ secrets.TESTNET_MNEMONIC }}" >> $GITHUB_ENV
          fi
      
      - name: Setup Go for starsd
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - name: Install starsd
        run: |
          git clone https://github.com/public-awesome/stargaze
          cd stargaze
          make install
      
      - name: Deploy contracts
        run: |
          echo "$MNEMONIC" > wallet.txt
          chmod 600 wallet.txt
          
          # Deploy NFT contract
          NFT_WASM=$(find artifacts/nft-contract -name "*.wasm" | head -n 1)
          if [ ! -f "$NFT_WASM" ]; then
            echo "::error::NFT contract WASM file not found"
            exit 1
          fi
          
          NFT_TX=$(starsd tx wasm store "$NFT_WASM" \
            --from wallet.txt --gas-prices $GAS_PRICE --gas auto --gas-adjustment 1.3 \
            --node $RPC_URL --chain-id $CHAIN_ID -y --output json)
          
          NFT_CODE_ID=$(echo $NFT_TX | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "NFT contract deployed with code ID: $NFT_CODE_ID"
          
          # Deploy coloring contract
          COLOR_WASM=$(find artifacts/coloring-contract -name "*.wasm" | head -n 1)
          if [ ! -f "$COLOR_WASM" ]; then
            echo "::error::Coloring contract WASM file not found"
            exit 1
          fi
          
          COLOR_TX=$(starsd tx wasm store "$COLOR_WASM" \
            --from wallet.txt --gas-prices $GAS_PRICE --gas auto --gas-adjustment 1.3 \
            --node $RPC_URL --chain-id $CHAIN_ID -y --output json)
          
          COLOR_CODE_ID=$(echo $COLOR_TX | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "Coloring contract deployed with code ID: $COLOR_CODE_ID"
          
          # Save code IDs
          echo "NFT_CODE_ID=$NFT_CODE_ID" >> $GITHUB_ENV
          echo "COLOR_CODE_ID=$COLOR_CODE_ID" >> $GITHUB_ENV
      
      - name: Cleanup
        if: always()
        run: rm -f wallet.txt