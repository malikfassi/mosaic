name: Contract Compile

on:
  workflow_call:
    inputs:
      contract_name:
        required: true
        type: string
        description: "Name of the contract to compile"
      execution_plan:
        required: true
        type: string
        description: "JSON string containing the execution plan"
    outputs:
      result:
        description: "Result of the workflow (success/failure/skipped)"
        value: ${{ jobs.compile.outputs.result }}
      data:
        description: "JSON string containing all job data"
        value: ${{ jobs.compile.outputs.data }}

jobs:
  compile:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
      data: ${{ steps.set-result.outputs.data }}
    steps:
      - uses: actions/checkout@v3

      - name: Check previous run
        id: check
        uses: ./.github/actions/check-previous-run
        with:
          execution_plan: ${{ inputs.execution_plan }}
          job_name: ${{ inputs.contract_name }}_compile
      
      - uses: dtolnay/rust-toolchain@stable
        if: steps.check.outputs.result != 'skipped'
        with:
          toolchain: stable
          components: rustfmt, clippy
          targets: wasm32-unknown-unknown

      - name: Parse JSON and set the wasm name
        id: set-name
        if: steps.check.outputs.result != 'skipped'
        run: |
          # Parse the JSON into a variable
          EXECUTION_PLAN_JSON='${{ inputs.execution_plan }}'
          JOB_NAME="${{ inputs.contract_name }}_compile"
  
          # Use jq to extract the required value
          COMPONENT_HASH=$(echo "$EXECUTION_PLAN_JSON" | jq -r --arg job "$JOB_NAME" '.jobs[$job].component.hash')
          
          # Export the value for use in subsequent steps
          echo "name=${COMPONENT_HASH}-wasm" >> $GITHUB_OUTPUT

      - name: Compile contract
        if: steps.check.outputs.result != 'skipped'
        id: compile
        working-directory: contracts
        run: |
          cargo build --target wasm32-unknown-unknown --release --package ${{ inputs.contract_name }}
          mkdir -p ${{ inputs.contract_name }}/artifacts
          cp target/wasm32-unknown-unknown/release/${{ inputs.contract_name }}.wasm ${{ inputs.contract_name }}/artifacts/
          echo "wasm_path=${{ inputs.contract_name }}/artifacts/${{ inputs.contract_name }}.wasm" >> $GITHUB_OUTPUT

      - name: Generate schema
        if: steps.check.outputs.result != 'skipped'
        working-directory: contracts/${{ inputs.contract_name }}
        run: |
          cargo run --bin schema
          
      - name: Upload schema artifacts
        if: steps.check.outputs.result != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-name.outputs.name }}-schema
          path: contracts/${{ inputs.contract_name }}/schema/*.json

      - name: Upload WASM artifact
        if: steps.check.outputs.result != 'skipped'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-name.outputs.name }}
          path: contracts/${{ inputs.contract_name }}/artifacts/${{ inputs.contract_name }}.wasm
      
      - name: Set result
        id: set-result
        if: always()
        uses: ./.github/actions/set-result
        with:
          previous_run_result: ${{ steps.check.outputs.result }}
          previous_run_data: ${{ steps.check.outputs.data }}
          job_status: ${{ job.status }}
          job_data: ${{ '{}' }}