name: Deploy Contract

on:
  workflow_call:
    inputs:
      contract_name:
        required: true
        type: string
        description: "Name of the contract to deploy (mosaic-tile-nft or mosaic-vending-minter)"
      needs_run:
        required: true
        type: string
        description: "Whether this workflow needs to run ('true' or 'false')"
      component_hash:
        required: true
        type: string
        description: "Hash of the contract component state"
      code_id:
        required: false
        type: string
        description: "Code ID of the deployed contract"
      contract_address:
        required: false
        type: string
        description: "Address of the deployed contract"
    secrets:
      STARSD_MNEMONIC:
        required: true
        description: "Mnemonic for the deployer account"
    outputs:
      result:
        description: "Result of the deployment job"
        value: ${{ jobs.deploy.outputs.result }}
      code_id:
        description: "Code ID of the deployed contract"
        value: ${{ jobs.deploy.outputs.code_id }}
      contract_address:
        description: "Address of the deployed contract"
        value: ${{ jobs.deploy.outputs.contract_address }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
      code_id: ${{ steps.deploy.outputs.code_id }}
      contract_address: ${{ steps.deploy.outputs.contract_address }}
    steps:
      - name: Check if job needs to run
        id: check
        run: |
          if [[ "${{ inputs.needs_run }}" != "true" ]]; then
            echo "Job can be skipped - reusing previous successful run"
            echo "result=skipped" >> $GITHUB_OUTPUT
            echo "code_id=${{ inputs.code_id }}" >> $GITHUB_OUTPUT
            echo "contract_address=${{ inputs.contract_address }}" >> $GITHUB_OUTPUT
            exit 0
          fi

      - uses: actions/checkout@v3
        if: steps.check.outputs.result != 'skipped'

      - name: Setup Rust
        if: steps.check.outputs.result != 'skipped'
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: wasm32-unknown-unknown

      - name: Cache Rust
        if: steps.check.outputs.result != 'skipped'
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            contracts/target/
          key: ${{ runner.os }}-cargo-${{ inputs.component_hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache starsd
        if: steps.check.outputs.result != 'skipped'
        id: cache-starsd
        uses: actions/cache@v3
        with:
          path: /usr/local/bin/starsd
          key: ${{ runner.os }}-starsd-7.5.0

      - name: Install starsd
        if: steps.check.outputs.result != 'skipped' && steps.cache-starsd.outputs.cache-hit != 'true'
        run: |
          wget https://github.com/public-awesome/stargaze/releases/download/v7.5.0/stargaze_7.5.0_linux_amd64.tar.gz
          tar -C /usr/local/bin -xvf stargaze_7.5.0_linux_amd64.tar.gz starsd
          chmod +x /usr/local/bin/starsd

      - name: Configure starsd
        if: steps.check.outputs.result != 'skipped'
        env:
          STARSD_MNEMONIC: ${{ secrets.STARSD_MNEMONIC }}
        run: |
          # Import key from mnemonic
          echo "$STARSD_MNEMONIC" | starsd keys add deployer --recover --keyring-backend test
          
          # Configure network
          starsd config node https://rpc.elgafar-1.stargaze-apis.com:443
          starsd config chain-id elgafar-1
          starsd config keyring-backend test
          
          # Verify balance
          ADDR=$(starsd keys show deployer -a --keyring-backend test)
          starsd query bank balances $ADDR

      - name: Build Contract
        if: steps.check.outputs.result != 'skipped'
        run: |
          cd contracts/${{ inputs.contract_name }}
          cargo build --release --target wasm32-unknown-unknown

      - name: Optimize Contract
        if: steps.check.outputs.result != 'skipped'
        run: |
          cd contracts/${{ inputs.contract_name }}
          docker run --rm -v "$(pwd)":/code \
            --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \
            --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
            cosmwasm/rust-optimizer:0.12.6

      - name: Deploy Contract
        if: steps.check.outputs.result != 'skipped'
        id: deploy
        run: |
          cd contracts/${{ inputs.contract_name }}
          
          # Store contract code
          STORE_TX=$(starsd tx wasm store artifacts/${{ inputs.contract_name }}.wasm \
            --from deployer \
            --gas-prices 0.025ustars \
            --gas-adjustment 1.7 \
            --gas auto \
            --keyring-backend test \
            -y -b block -o json)
          
          # Extract code ID using sed
          CODE_ID=$(echo "$STORE_TX" | sed -n 's/.*"key":"code_id","value":"\([^"]*\)".*/\1/p')
          echo "code_id=${CODE_ID}" >> $GITHUB_OUTPUT
          
          # Instantiate contract
          INIT_MSG=$(cat schema/instantiate_msg.json)
          INST_TX=$(starsd tx wasm instantiate $CODE_ID "$INIT_MSG" \
            --from deployer \
            --label "${{ inputs.contract_name }}-$(date +%s)" \
            --gas-prices 0.025ustars \
            --gas-adjustment 1.7 \
            --gas auto \
            --no-admin \
            --keyring-backend test \
            -y -b block -o json)
          
          # Extract contract address
          CONTRACT_ADDR=$(echo "$INST_TX" | sed -n 's/.*"key":"_contract_address","value":"\([^"]*\)".*/\1/p')
          echo "contract_address=${CONTRACT_ADDR}" >> $GITHUB_OUTPUT

      - name: Set result
        id: set-result
        if: always()
        run: |
          if [[ "${{ inputs.needs_run }}" != "true" ]]; then
            echo "result=skipped" >> $GITHUB_OUTPUT
          else
            echo "result=${{ job.status }}" >> $GITHUB_OUTPUT
          fi 