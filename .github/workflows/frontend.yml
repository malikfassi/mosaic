name: Frontend

on:
  push:
    paths:
      - 'frontend/**'
  pull_request:
    paths:
      - 'frontend/**'

env:
  STARGAZE_RPC: "https://rpc.elgafar-1.stargaze-apis.com"
  STARGAZE_CHAIN_ID: "elgafar-1"
  STARGAZE_DENOM: "ustars"
  GAS_PRICE: "0.025ustars"

jobs:
  # Parallel static checks
  lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript checks
        run: npm run typecheck

  # Parallel unit tests
  unit-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test

  # Build step
  build:
    needs: [lint, unit-tests]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build
        env:
          VITE_STARGAZE_RPC: ${{ env.STARGAZE_RPC }}
          VITE_STARGAZE_CHAIN_ID: ${{ env.STARGAZE_CHAIN_ID }}
        run: npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
          retention-days: 1

  # E2E tests requiring contract deployment
  e2e:
    needs: [build]
    runs-on: ubuntu-latest
    environment: testnet
    steps:
      - uses: actions/checkout@v4
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      # Setup test environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Setup Go for starsd
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
      
      - name: Install starsd
        run: |
          git clone https://github.com/public-awesome/stargaze
          cd stargaze
          make install
          starsd version
      
      # Generate test wallet
      - name: Generate test wallet
        id: wallet
        run: |
          KEY_OUTPUT=$(starsd keys add test-wallet --output json)
          echo "ADDRESS=$(echo $KEY_OUTPUT | jq -r .address)" >> $GITHUB_OUTPUT
          echo "MNEMONIC=$(echo $KEY_OUTPUT | jq -r .mnemonic)" >> $GITHUB_ENV
          
          # Save wallet info for Discord notification
          echo "$MNEMONIC" > test-wallet.txt
          echo "::notice::Created test wallet: ${{ steps.wallet.outputs.ADDRESS }}"
      
      - name: Upload test wallet info
        uses: actions/upload-artifact@v3
        with:
          name: test-artifacts
          path: test-wallet.txt
          retention-days: 1
      
      # Get test funds
      - name: Request testnet funds
        run: |
          curl -X POST -d '{"address": "${{ steps.wallet.outputs.ADDRESS }}"}' \
            https://faucet.elgafar-1.stargaze-apis.com/claim
          sleep 10
      
      - name: Verify balance
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.ADDRESS }} \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -lt "1000000" ]; then
            echo "::error::Insufficient balance for testing: $BALANCE ustars"
            exit 1
          fi
          echo "::notice::Test wallet funded with $BALANCE ustars"
      
      # Deploy test contracts
      - name: Build and deploy test contracts
        id: contracts
        run: |
          cd contracts/pixel-nft
          cargo wasm
          
          # Deploy NFT contract
          NFT_TX=$(starsd tx wasm store artifacts/nft_contract.wasm \
            --from test-wallet --gas-prices $GAS_PRICE --gas auto --gas-adjustment 1.3 \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            -y --output json)
          
          NFT_CODE_ID=$(echo $NFT_TX | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "NFT_CODE_ID=$NFT_CODE_ID" >> $GITHUB_OUTPUT
          echo "::notice::NFT contract stored with code ID: $NFT_CODE_ID"
          
          # Deploy coloring contract
          COLOR_TX=$(starsd tx wasm store artifacts/coloring_contract.wasm \
            --from test-wallet --gas-prices $GAS_PRICE --gas auto --gas-adjustment 1.3 \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            -y --output json)
          
          COLOR_CODE_ID=$(echo $COLOR_TX | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "COLOR_CODE_ID=$COLOR_CODE_ID" >> $GITHUB_OUTPUT
          echo "::notice::Coloring contract stored with code ID: $COLOR_CODE_ID"
      
      # Run E2E tests
      - name: Start local server
        run: |
          cd frontend
          npm install
          VITE_STARGAZE_RPC=$STARGAZE_RPC \
          VITE_STARGAZE_CHAIN_ID=$STARGAZE_CHAIN_ID \
          VITE_NFT_CODE_ID=${{ steps.contracts.outputs.NFT_CODE_ID }} \
          VITE_COLOR_CODE_ID=${{ steps.contracts.outputs.COLOR_CODE_ID }} \
          npm run dev &
          sleep 10
      
      - name: Run E2E tests
        env:
          NFT_CONTRACT_ID: ${{ steps.contracts.outputs.NFT_CODE_ID }}
          COLOR_CONTRACT_ID: ${{ steps.contracts.outputs.COLOR_CODE_ID }}
          TEST_WALLET_MNEMONIC: ${{ env.MNEMONIC }}
          STARGAZE_RPC: ${{ env.STARGAZE_RPC }}
          STARGAZE_CHAIN_ID: ${{ env.STARGAZE_CHAIN_ID }}
        run: |
          cd frontend
          npm run test:e2e
      
      # Cleanup
      - name: Return unused funds
        if: always()
        run: |
          BALANCE=$(starsd query bank balances ${{ steps.wallet.outputs.ADDRESS }} \
            --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID \
            --output json | jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -gt "10000" ]; then
            starsd tx bank send test-wallet \
              stars1k8c2m5cn322akk5wy8lpt87dd2f4yh9azg7dtq \
              $(($BALANCE - 10000))ustars \
              --from test-wallet --gas-prices $GAS_PRICE \
              --node $STARGAZE_RPC --chain-id $STARGAZE_CHAIN_ID -y
            echo "::notice::Returned $(($BALANCE - 10000)) ustars"
          fi