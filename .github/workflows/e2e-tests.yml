name: End-to-End Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-D warnings"
  STARGAZE_RPC: "https://rpc.elgafar-1.stargaze-apis.com"
  STARGAZE_CHAIN_ID: "elgafar-1"
  GAS_PRICE: "0.025ustars"

jobs:
  # Build contracts in parallel
  build-contracts:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        contract: [sg721-pixel, coloring]
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.contract }}-${{ hashFiles(format('contracts/pixel-nft/contracts/{0}/Cargo.lock', matrix.contract)) }}
      
      - name: Build contract
        run: |
          cd contracts/pixel-nft/contracts/${{ matrix.contract }}
          cargo wasm
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.contract }}-contract
          path: contracts/pixel-nft/contracts/${{ matrix.contract }}/artifacts/*.wasm
          retention-days: 1
          if-no-files-found: error

  # Setup test environment
  setup-test-env:
    runs-on: ubuntu-latest
    outputs:
      wallet_address: ${{ steps.wallet.outputs.address }}
      wallet_mnemonic: ${{ steps.wallet.outputs.mnemonic }}
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install CosmJS
        run: npm install -g @cosmjs/cli @cosmjs/stargate @cosmjs/cosmwasm-stargate
      
      - name: Generate test wallet
        id: wallet
        run: |
          TEST_WALLET=$(cosmjs-cli keys generate)
          echo "address=$(echo $TEST_WALLET | jq -r '.address')" >> $GITHUB_OUTPUT
          echo "mnemonic=$(echo $TEST_WALLET | jq -r '.mnemonic')" >> $GITHUB_OUTPUT
          echo "$TEST_WALLET" > test-wallet.json
      
      - name: Upload wallet info
        uses: actions/upload-artifact@v3
        with:
          name: test-wallet
          path: test-wallet.json
          retention-days: 1

  # Fund test wallet
  fund-wallet:
    needs: setup-test-env
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install CosmJS
        run: npm install -g @cosmjs/cli @cosmjs/stargate
      
      - name: Check deployment wallet
        run: |
          echo "${{ secrets.TESTNET_MNEMONIC }}" > deploy-wallet.txt
          BALANCE=$(cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
            --from deploy-wallet.txt \
            query bank balances $(cosmjs-cli --from deploy-wallet.txt keys show -a) \
            --node $STARGAZE_RPC --output json | \
            jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -lt "1000000" ]; then
            echo "::error::Insufficient deployment wallet balance: $BALANCE ustars"
            exit 1
          fi
          echo "::notice::Deployment wallet balance: $BALANCE ustars"
      
      - name: Fund test wallet
        run: |
          cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
            --from deploy-wallet.txt \
            --node $STARGAZE_RPC \
            tx bank send $(cosmjs-cli --from deploy-wallet.txt keys show -a) \
            ${{ needs.setup-test-env.outputs.wallet_address }} 500000ustars
          
          sleep 10
          
          BALANCE=$(cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
            --node $STARGAZE_RPC \
            query bank balances ${{ needs.setup-test-env.outputs.wallet_address }} \
            --output json | jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -lt "500000" ]; then
            echo "::error::Fund transfer failed. Balance: $BALANCE ustars"
            exit 1
          fi
          echo "::notice::Test wallet funded with $BALANCE ustars"
      
      - name: Cleanup
        if: always()
        run: rm -f deploy-wallet.txt

  # Deploy contracts
  deploy-contracts:
    needs: [build-contracts, fund-wallet]
    runs-on: ubuntu-latest
    outputs:
      nft_code_id: ${{ steps.deploy.outputs.nft_code_id }}
      color_code_id: ${{ steps.deploy.outputs.color_code_id }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install CosmJS
        run: npm install -g @cosmjs/cli @cosmjs/cosmwasm-stargate
      
      - name: Deploy contracts
        id: deploy
        run: |
          echo "${{ secrets.TESTNET_MNEMONIC }}" > deploy-wallet.txt
          chmod 600 deploy-wallet.txt
          
          # Deploy NFT contract
          NFT_WASM=$(find artifacts/sg721-pixel-contract -name "*.wasm")
          NFT_TX=$(cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
            --from deploy-wallet.txt \
            --node $STARGAZE_RPC \
            --gas-prices $GAS_PRICE \
            tx wasm store "$NFT_WASM" -y --output json)
          
          NFT_CODE_ID=$(echo $NFT_TX | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "nft_code_id=$NFT_CODE_ID" >> $GITHUB_OUTPUT
          echo "::notice::NFT contract deployed with code ID: $NFT_CODE_ID"
          
          # Deploy coloring contract
          COLOR_WASM=$(find artifacts/coloring-contract -name "*.wasm")
          COLOR_TX=$(cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
            --from deploy-wallet.txt \
            --node $STARGAZE_RPC \
            --gas-prices $GAS_PRICE \
            tx wasm store "$COLOR_WASM" -y --output json)
          
          COLOR_CODE_ID=$(echo $COLOR_TX | jq -r '.logs[0].events[] | 
            select(.type=="store_code") | .attributes[] | 
            select(.key=="code_id") | .value')
          
          echo "color_code_id=$COLOR_CODE_ID" >> $GITHUB_OUTPUT
          echo "::notice::Coloring contract deployed with code ID: $COLOR_CODE_ID"
      
      - name: Save contract IDs
        run: |
          echo "{\"nft_code_id\": \"${{ steps.deploy.outputs.nft_code_id }}\", \"color_code_id\": \"${{ steps.deploy.outputs.color_code_id }}\"}" > contract-ids.json
      
      - name: Upload contract IDs
        uses: actions/upload-artifact@v3
        with:
          name: contract-ids
          path: contract-ids.json
          retention-days: 1
      
      - name: Cleanup
        if: always()
        run: rm -f deploy-wallet.txt

  # Run E2E tests
  run-tests:
    needs: [setup-test-env, deploy-contracts]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-e2e-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run E2E tests
        env:
          NFT_CODE_ID: ${{ needs.deploy-contracts.outputs.nft_code_id }}
          COLOR_CODE_ID: ${{ needs.deploy-contracts.outputs.color_code_id }}
          WALLET_MNEMONIC: ${{ needs.setup-test-env.outputs.wallet_mnemonic }}
          STARGAZE_RPC: ${{ env.STARGAZE_RPC }}
          STARGAZE_CHAIN_ID: ${{ env.STARGAZE_CHAIN_ID }}
        run: |
          cd contracts/pixel-nft/tests/e2e
          cargo test --test e2e -- --nocapture

  # Return unused funds
  cleanup:
    needs: [setup-test-env, run-tests]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install CosmJS
        run: npm install -g @cosmjs/cli @cosmjs/stargate
      
      - name: Return funds
        run: |
          echo "${{ needs.setup-test-env.outputs.wallet_mnemonic }}" > test-wallet.txt
          chmod 600 test-wallet.txt
          
          BALANCE=$(cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
            --node $STARGAZE_RPC \
            query bank balances ${{ needs.setup-test-env.outputs.wallet_address }} \
            --output json | jq -r '.balances[] | select(.denom=="ustars") | .amount')
          
          if [ "$BALANCE" -gt "10000" ]; then
            cosmjs-cli --chain-id $STARGAZE_CHAIN_ID \
              --from test-wallet.txt \
              --node $STARGAZE_RPC \
              --gas-prices $GAS_PRICE \
              tx bank send ${{ needs.setup-test-env.outputs.wallet_address }} \
              stars1k8c2m5cn322akk5wy8lpt87dd2f4yh9azg7dtq \
              $(($BALANCE - 10000))ustars -y
            
            echo "::notice::Returned $(($BALANCE - 10000)) ustars"
          fi
      
      - name: Cleanup
        if: always()
        run: rm -f test-wallet.txt