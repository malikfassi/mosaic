name: Mosaic CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  pull-requests: read
  contents: read
  actions: read

jobs:
  generate_execution_plan:
    uses: ./.github/workflows/execution-plan.yml
    with:
      GITHUB_SHA: ${{ github.sha }}
    secrets:
      GIST_SECRET: ${{ secrets.GIST_SECRET }}

  frontend_lint:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/frontend-lint.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.EXECUTION_PLAN }}

  frontend_test:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/frontend-test.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  frontend_build:
    needs: [generate_execution_plan, frontend_lint, frontend_test]
    uses: ./.github/workflows/frontend-build.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  # Mosaic Tile Contract
  mosaic_tile_clippy:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-clippy.yml
    with:
      contract_name: mosaic_tile_nft
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_tile_format:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-format.yml
    with:
      contract_name: mosaic_tile_nft
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_tile_test:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-test.yml
    with:
      contract_name: mosaic_tile_nft
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_tile_compile:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-compile.yml
    with:
      contract_name: mosaic_tile_nft
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_tile_deploy:
    needs: [
      generate_execution_plan,
      mosaic_tile_clippy,
      mosaic_tile_format,
      mosaic_tile_test,
      mosaic_tile_compile,
    ]
    uses: ./.github/workflows/contract-deploy.yml
    with:
      contract_name: mosaic_tile_nft
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}
    secrets:
      STARSD_MNEMONIC: ${{ secrets.DEPLOYMENT_WALLET_ADDRESS }}

  # Mosaic Vending Contract
  mosaic_vending_clippy:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-clippy.yml
    with:
      contract_name: mosaic_vending_minter
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_vending_format:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-format.yml
    with:
      contract_name: mosaic_vending_minter
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_vending_test:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-test.yml
    with:
      contract_name: mosaic_vending_minter
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_vending_compile:
    needs: [generate_execution_plan]
    uses: ./.github/workflows/contract-compile.yml
    with:
      contract_name: mosaic_vending_minter
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}

  mosaic_vending_deploy:
    needs: [
      generate_execution_plan,
      mosaic_vending_clippy,
      mosaic_vending_format,
      mosaic_vending_test,
      mosaic_vending_compile,
    ]
    uses: ./.github/workflows/contract-deploy.yml
    with:
      contract_name: mosaic_vending_minter
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}
    secrets:
      STARSD_MNEMONIC: ${{ secrets.DEPLOYMENT_WALLET_ADDRESS }}

  # E2E Tests

  mosaic_tile_e2e:
    needs: [
      generate_execution_plan,
      mosaic_tile_deploy,
    ]
    uses: ./.github/workflows/e2e.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}
      test_type: mosaic-tile
  
  mosaic_vending_e2e:
    needs: [
      generate_execution_plan,
      mosaic_vending_deploy,
    ]
    uses: ./.github/workflows/e2e.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}
      test_type: mosaic-vending

  full_e2e:
    needs: [
      generate_execution_plan,
      frontend_build,
      mosaic_tile_e2e,
      mosaic_vending_e2e
    ]
    uses: ./.github/workflows/e2e.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}
      test_type: full

  gather_results:
    needs: [
      generate_execution_plan,
      frontend_lint,
      frontend_test,
      frontend_build,
      mosaic_tile_clippy,
      mosaic_tile_format,
      mosaic_tile_test,
      mosaic_tile_compile,
      mosaic_tile_deploy,
      mosaic_vending_clippy,
      mosaic_vending_format,
      mosaic_vending_test,
      mosaic_vending_compile,
      mosaic_vending_deploy,
      mosaic_tile_e2e,
      mosaic_vending_e2e,
      full_e2e
    ]
    if: always()
    uses: ./.github/workflows/gather-results.yml
    with:
      execution_plan: ${{ needs.generate_execution_plan.outputs.execution_plan }}
      # Frontend results
      frontend_lint_result: ${{ needs.frontend_lint.outputs.result }}
      frontend_test_result: ${{ needs.frontend_test.outputs.result }}
      frontend_build_result: ${{ needs.frontend_build.outputs.result }}
      frontend_lint_outputs: ${{ needs.frontend_lint.outputs.data }}
      frontend_test_outputs: ${{ needs.frontend_test.outputs.data }}
      frontend_build_outputs: ${{ needs.frontend_build.outputs.data }}
      # Mosaic Tile results
      mosaic_tile_clippy_result: ${{ needs.mosaic_tile_clippy.outputs.result }}
      mosaic_tile_clippy_outputs: ${{ needs.mosaic_tile_clippy.outputs.data }}
      mosaic_tile_fmt_result: ${{ needs.mosaic_tile_format.outputs.result }}
      mosaic_tile_fmt_outputs: ${{ needs.mosaic_tile_format.outputs.data }}
      mosaic_tile_test_result: ${{ needs.mosaic_tile_test.outputs.result }}
      mosaic_tile_test_outputs: ${{ needs.mosaic_tile_test.outputs.data }}
      mosaic_tile_compile_result: ${{ needs.mosaic_tile_compile.outputs.result }}
      mosaic_tile_compile_outputs: ${{ needs.mosaic_tile_compile.outputs.data }}
      mosaic_tile_deploy_result: ${{ needs.mosaic_tile_deploy.outputs.result }}
      mosaic_tile_deploy_outputs: ${{ needs.mosaic_tile_deploy.outputs.data }}
      # Mosaic Vending results
      mosaic_vending_clippy_result: ${{ needs.mosaic_vending_clippy.outputs.result }}
      mosaic_vending_clippy_outputs: ${{ needs.mosaic_vending_clippy.outputs.data }}
      mosaic_vending_fmt_result: ${{ needs.mosaic_vending_format.outputs.result }}
      mosaic_vending_fmt_outputs: ${{ needs.mosaic_vending_format.outputs.data }}
      mosaic_vending_test_result: ${{ needs.mosaic_vending_test.outputs.result }}
      mosaic_vending_test_outputs: ${{ needs.mosaic_vending_test.outputs.data }}
      mosaic_vending_compile_result: ${{ needs.mosaic_vending_compile.outputs.result }}
      mosaic_vending_compile_outputs: ${{ needs.mosaic_vending_compile.outputs.data }}
      mosaic_vending_deploy_result: ${{ needs.mosaic_vending_deploy.outputs.result }}
      mosaic_vending_deploy_outputs: ${{ needs.mosaic_vending_deploy.outputs.data }}
      # E2E results
      mosaic_tile_e2e_result: ${{ needs.mosaic_tile_e2e.outputs.result }}
      mosaic_tile_e2e_outputs: ${{ needs.mosaic_tile_e2e.outputs.data }}
      mosaic_vending_e2e_result: ${{ needs.mosaic_vending_e2e.outputs.result }}
      mosaic_vending_e2e_outputs: ${{ needs.mosaic_vending_e2e.outputs.data }}
      full_e2e_result: ${{ needs.full_e2e.outputs.result }}
      full_e2e_outputs: ${{ needs.full_e2e.outputs.data }}

  update_status:
    needs: [gather_results]
    uses: ./.github/workflows/update-status.yml
    with:
      plan_results: ${{ needs.gather_results.outputs.plan_results }}
    secrets:
      GIST_SECRET: ${{ secrets.GIST_SECRET }}

  notify_discord:
    needs: [gather_results]
    uses: ./.github/workflows/notify-discord.yml
    with:
      plan_results: ${{ needs.gather_results.outputs.plan_results }}
    secrets:
      DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
