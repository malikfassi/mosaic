name: Contract Deploy

on:
  workflow_call:
    inputs:
      contract_name:
        required: true
        type: string
        description: "Name of the contract to deploy"
      execution_plan:
        required: true
        type: string
        description: "JSON string containing the execution plan"
      node:
        required: false
        type: string
        default: "http://localhost:26657"
        description: "RPC endpoint"
      chain_id:
        required: false
        type: string
        default: "localnet"
        description: "Chain ID"
    secrets:
      DEPLOYMENT_WALLET_MNEMONIC:
        required: true
        description: "Mnemonic for the deployment wallet"
    outputs:
      result:
        description: "Result of the workflow (success/failure/skipped)"
        value: ${{ jobs.deploy.outputs.result }}
      data:
        description: "JSON string containing all job data"
        value: ${{ jobs.deploy.outputs.data }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
      data: ${{ steps.set-result.outputs.data }}
    steps:
      - uses: actions/checkout@v3

      - name: Check previous run
        id: check
        uses: ./.github/actions/check-previous-run
        with:
          execution_plan: ${{ inputs.execution_plan }}
          job_name: ${{ inputs.contract_name }}_deploy

      - name: Setup starsd
        if: steps.check.outputs.result != 'skipped'
        uses: ./.github/actions/setup-starsd
        with:
          branch: main
          mnemonic: ${{ secrets.DEPLOYMENT_WALLET_MNEMONIC }}
          node: ${{ inputs.node }}
          chain_id: ${{ inputs.chain_id }}

      - name: Parse JSON and set wasm name
        id: set-name
        if: steps.check.outputs.result != 'skipped'
        run: |
          # Parse the JSON into a variable
          EXECUTION_PLAN_JSON='${{ inputs.execution_plan }}'
          JOB_NAME="${{ inputs.contract_name }}_compile"
  
          # Use jq to extract the required value
          COMPONENT_HASH=$(echo "$EXECUTION_PLAN_JSON" | jq -r --arg job "$JOB_NAME" '.jobs[$job].component.hash')
          
          # if compile skipped, use previous run id else use run id from compile job
          if [ "${{ steps.check.outputs.result }}" == "skipped" ]; then
            COMPILE_RUN_ID=$(echo "$EXECUTION_PLAN_JSON" | jq -r --arg job "$JOB_NAME" '.jobs[$job].previous_run.run_id')
          else
            COMPILE_RUN_ID=$(echo "$EXECUTION_PLAN_JSON" | jq -r --arg job "$JOB_NAME" '.jobs[$job].run_id')
          fi
          
          # Get repository from metadata
          REPO=$(echo "$EXECUTION_PLAN_JSON" | jq -r '.metadata.repository')

          # Export the values for use in subsequent steps
          echo "name=${COMPONENT_HASH}-wasm" >> $GITHUB_OUTPUT
          echo "run_id=$COMPILE_RUN_ID" >> $GITHUB_OUTPUT
          echo "repo=$REPO" >> $GITHUB_OUTPUT

      - name: Download WASM artifact
        if: steps.check.outputs.result != 'skipped'
        uses: dawidd6/action-download-artifact@v2
        with:
          name: ${{ steps.set-name.outputs.name }}
          path: contracts/${{ inputs.contract_name }}/artifacts
          workflow: contract-compile.yml
          workflow_conclusion: success
          run_id: ${{ steps.set-name.outputs.run_id }}
          repo: ${{ steps.set-name.outputs.repo }}

      - name: Deploy contract
        id: deploy
        if: steps.check.outputs.result != 'skipped'
        working-directory: contracts/${{ inputs.contract_name }}
        run: |
          WASM_FILE=$(ls artifacts/*.wasm)
          if [ ! -f "$WASM_FILE" ]; then
            echo "Error: WASM file not found in artifacts directory"
            ls -la artifacts/
            exit 1
          fi
          
          echo "Storing contract..."
          STORE_TX=$(starsd tx wasm store "$WASM_FILE" \
            --from deployer \
            --keyring-backend test \
            --output json \
            -y)
          
          # Extract code ID from store transaction
          CODE_ID=$(echo "$STORE_TX" | jq -r '.logs[0].events[] | select(.type=="store_code") | .attributes[] | select(.key=="code_id") | .value')
          echo "Contract stored with code ID: $CODE_ID"
          
          echo "Instantiating contract..."
          INIT_TX=$(starsd tx wasm instantiate "$CODE_ID" '{}' \
            --from deployer \
            --keyring-backend test \
            --label "${{ inputs.contract_name }}" \
            --output json \
            -y)
          
          # Extract contract address from instantiate transaction
          CONTRACT_ADDR=$(echo "$INIT_TX" | jq -r '.logs[0].events[] | select(.type=="instantiate") | .attributes[] | select(.key=="_contract_address") | .value')
          echo "Contract instantiated at address: $CONTRACT_ADDR"
          
          # Set output data
          echo "data={\"code_id\": \"$CODE_ID\", \"contract_address\": \"$CONTRACT_ADDR\"}" >> $GITHUB_OUTPUT

      - name: Set result
        id: set-result
        if: always()
        uses: ./.github/actions/set-result
        with:
          previous_run_result: ${{ steps.check.outputs.result }}
          previous_run_data: ${{ steps.check.outputs.data }}
          job_status: ${{ job.status }}
          job_data: ${{ steps.deploy.outputs.data || '{}' }}