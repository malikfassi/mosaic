name: Contract Deploy

on:
  workflow_call:
    inputs:
      contract_name:
        required: true
        type: string
        description: "Name of the contract to deploy"
      execution_plan:
        required: true
        type: string
        description: "JSON string containing the execution plan"
    secrets:
      STARSD_MNEMONIC:
        required: true
        description: "Mnemonic for the deployment wallet"
    outputs:
      result:
        description: "Result of the workflow (success/failure/skipped)"
        value: ${{ jobs.deploy.outputs.result }}
      data:
        description: "JSON string containing all job data"
        value: ${{ jobs.deploy.outputs.data }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.set-result.outputs.result }}
      data: ${{ steps.set-result.outputs.data }}
    steps:
      - uses: actions/checkout@v3

      - name: Check previous run
        id: check
        uses: ./.github/actions/check-previous-run
        with:
          execution_plan: ${{ inputs.execution_plan }}
          job_name: deploy_${{ inputs.contract_name }}

      - name: Setup Rust
        if: steps.check.outputs.result != 'skipped'
        uses: ./.github/workflows/setup-rust
        with:
          rust-version: stable
          workspace-path: contracts/Cargo.toml
          package-path: contracts/${{ inputs.contract_name }}/Cargo.toml
          setup-wasm32: true

      - name: Setup starsd
        if: steps.check.outputs.result != 'skipped'
        uses: ./.github/workflows/setup-starsd
        with:
          branch: main

      - name: Compile contract
        id: compile
        if: steps.check.outputs.result != 'skipped'
        run: |
          cd contracts/${{ inputs.contract_name }}
          cargo build --target wasm32-unknown-unknown --release
          echo "wasm_path=$(realpath target/wasm32-unknown-unknown/release/*.wasm)" >> $GITHUB_OUTPUT

      - name: Deploy contract
        id: deploy
        if: steps.check.outputs.result != 'skipped'
        env:
          STARSD_MNEMONIC: ${{ secrets.STARSD_MNEMONIC }}
        run: |
          cd contracts/${{ inputs.contract_name }}
          CODE_ID=$(starsd tx wasm store ${{ steps.compile.outputs.wasm_path }} --from deployer -y | jq -r '.logs[0].events[1].attributes[0].value')
          CONTRACT_ADDR=$(starsd tx wasm instantiate $CODE_ID '{}' --from deployer --label "${{ inputs.contract_name }}" -y | jq -r '.logs[0].events[0].attributes[0].value')
          echo "data={\"code_id\": \"$CODE_ID\", \"contract_address\": \"$CONTRACT_ADDR\"}" >> $GITHUB_OUTPUT

      - name: Set result
        id: set-result
        if: always()
        uses: ./.github/actions/set-result
        with:
          previous_run_result: ${{ steps.check.outputs.result }}
          previous_run_data: ${{ steps.check.outputs.data }}
          job_status: ${{ job.status }}
          job_data: ${{ steps.deploy.outputs.data || '{}' }} 