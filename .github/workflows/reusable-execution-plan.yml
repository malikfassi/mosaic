name: Generate Execution Plan

on:
  workflow_call:
    outputs:
      plan:
        description: "Complete execution plan for all jobs"
        value: ${{ jobs.create-plan.outputs.plan }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
    outputs:
      frontend_changes: ${{ steps.filter.outputs.frontend }}
      mosaic_tile_changes: ${{ steps.filter.outputs.mosaic_tile }}
      mosaic_vending_changes: ${{ steps.filter.outputs.mosaic_vending }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            frontend:
              - 'frontend/**'
            mosaic_tile:
              - 'contracts/mosaic-tile-nft/**'
              - 'contracts/Cargo.toml'
            mosaic_vending:
              - 'contracts/mosaic-vending-minter/**'
              - 'contracts/Cargo.toml'

  calculate-hashes:
    runs-on: ubuntu-latest
    needs: detect-changes
    outputs:
      frontend_hash: ${{ steps.hashes.outputs.frontend_hash }}
      mosaic_tile_hash: ${{ steps.hashes.outputs.mosaic_tile_hash }}
      mosaic_vending_hash: ${{ steps.hashes.outputs.mosaic_vending_hash }}
    steps:
      - uses: actions/checkout@v3
      - name: Generate component hashes
        id: hashes
        run: |
          # Frontend hash
          if [[ -d "frontend" ]]; then
            frontend_hash=$(find frontend -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          else
            frontend_hash="empty_directory"
          fi
          echo "frontend_hash=$frontend_hash" >> $GITHUB_OUTPUT

          # Mosaic tile hash
          if [[ -d "contracts/mosaic-tile-nft" ]]; then
            mosaic_tile_hash=$(find contracts/mosaic-tile-nft -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          else
            mosaic_tile_hash="empty_directory"
          fi
          echo "mosaic_tile_hash=$mosaic_tile_hash" >> $GITHUB_OUTPUT

          # Mosaic vending hash
          if [[ -d "contracts/mosaic-vending-minter" ]]; then
            mosaic_vending_hash=$(find contracts/mosaic-vending-minter -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)
          else
            mosaic_vending_hash="empty_directory"
          fi
          echo "mosaic_vending_hash=$mosaic_vending_hash" >> $GITHUB_OUTPUT

  check-previous-runs:
    runs-on: ubuntu-latest
    needs: [detect-changes, calculate-hashes]
    permissions:
      actions: read
    outputs:
      previous_runs: ${{ steps.check-runs.outputs.previous_runs }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Check previous runs
        id: check-runs
        env:
          GH_TOKEN: ${{ github.token }}
          FRONTEND_HASH: ${{ needs.calculate-hashes.outputs.frontend_hash }}
          MOSAIC_TILE_HASH: ${{ needs.calculate-hashes.outputs.mosaic_tile_hash }}
          MOSAIC_VENDING_HASH: ${{ needs.calculate-hashes.outputs.mosaic_vending_hash }}
        run: |
          # Function to check previous runs
          check_previous_runs() {
            local component=$1
            local component_hash=$2
            
            # Look for successful runs with this hash
            local last_runs=$(gh run list \
              --workflow mosaic.yml \
              --json conclusion,databaseId,createdAt,url,headSha \
              --jq ".[] | select(.conclusion == \"success\")" \
              --limit 10)
            
            # Check each run for matching hash
            if [[ -n "$last_runs" ]]; then
              while read -r run; do
                local run_id=$(echo "$run" | jq -r '.databaseId')
                local run_sha=$(echo "$run" | jq -r '.headSha')
                
                # Get the execution plan from the run artifacts
                local plan_url="https://api.github.com/repos/${{ github.repository }}/actions/runs/$run_id/artifacts"
                local plan_json=$(curl -H "Authorization: token $GH_TOKEN" "$plan_url" | jq -r '.artifacts[] | select(.name == "execution-plan").url')
                
                if [[ -n "$plan_json" ]]; then
                  local plan_content=$(curl -H "Authorization: token $GH_TOKEN" -L "$plan_json" | jq -r ".components.$component.hash")
                  
                  if [[ "$plan_content" == "${!component_hash}" ]]; then
                    # Found matching run
                    local created_at=$(echo "$run" | jq -r '.createdAt')
                    local run_url=$(echo "$run" | jq -r '.url')
                    echo "{\"found\":true,\"run_id\":\"$run_id\",\"created_at\":\"$created_at\",\"url\":\"$run_url\"}"
                    return
                  fi
                fi
              done <<< "$last_runs"
            fi
            
            # No matching run found
            echo "{\"found\":false}"
          }

          # Check each component and build JSON
          frontend_run=$(check_previous_runs "frontend" "FRONTEND_HASH")
          mosaic_tile_run=$(check_previous_runs "mosaic_tile" "MOSAIC_TILE_HASH")
          mosaic_vending_run=$(check_previous_runs "mosaic_vending" "MOSAIC_VENDING_HASH")
          
          # Combine into final JSON
          echo "previous_runs={\"frontend\":$frontend_run,\"mosaic_tile\":$mosaic_tile_run,\"mosaic_vending\":$mosaic_vending_run}" >> $GITHUB_OUTPUT

  create-plan:
    runs-on: ubuntu-latest
    needs: [detect-changes, calculate-hashes, check-previous-runs]
    outputs:
      plan: ${{ steps.create-plan.outputs.plan }}
    steps:
      - name: Create execution plan
        id: create-plan
        run: |
          # Create plan JSON directly
          plan=$(cat << 'EOF'
          {
            "components": {
              "frontend": {
                "name": "frontend",
                "hash": "${{ needs.calculate-hashes.outputs.frontend_hash }}",
                "files_changed": ${{ needs.detect-changes.outputs.frontend_changes }},
                "previous_run": ${{ fromJson(needs.check-previous-runs.outputs.previous_runs).frontend }},
                "dependencies": []
              },
              "mosaic_tile": {
                "name": "mosaic-tile",
                "hash": "${{ needs.calculate-hashes.outputs.mosaic_tile_hash }}",
                "files_changed": ${{ needs.detect-changes.outputs.mosaic_tile_changes }},
                "previous_run": ${{ fromJson(needs.check-previous-runs.outputs.previous_runs).mosaic_tile }},
                "dependencies": ["rust-setup"]
              },
              "mosaic_vending": {
                "name": "mosaic-vending",
                "hash": "${{ needs.calculate-hashes.outputs.mosaic_vending_hash }}",
                "files_changed": ${{ needs.detect-changes.outputs.mosaic_vending_changes }},
                "previous_run": ${{ fromJson(needs.check-previous-runs.outputs.previous_runs).mosaic_vending }},
                "dependencies": ["rust-setup"]
              }
            },
            "jobs": {
              "frontend-ci": {
                "component": "frontend",
                "needs_run": ${{ needs.detect-changes.outputs.frontend_changes }} || ${{ fromJson(needs.check-previous-runs.outputs.previous_runs).frontend.found == false }},
                "dependencies": ["changes"]
              },
              "mosaic-tile-ci": {
                "component": "mosaic_tile",
                "needs_run": ${{ needs.detect-changes.outputs.mosaic_tile_changes }} || ${{ fromJson(needs.check-previous-runs.outputs.previous_runs).mosaic_tile.found == false }},
                "dependencies": ["changes", "rust-setup"]
              },
              "mosaic-vending-ci": {
                "component": "mosaic_vending",
                "needs_run": ${{ needs.detect-changes.outputs.mosaic_vending_changes }} || ${{ fromJson(needs.check-previous-runs.outputs.previous_runs).mosaic_vending.found == false }},
                "dependencies": ["changes", "rust-setup"]
              },
              "deploy-mosaic-tile": {
                "component": "mosaic_tile",
                "needs_run": true,
                "dependencies": ["mosaic-tile-ci"],
                "condition": "needs.mosaic-tile-ci.result == 'success'"
              },
              "deploy-mosaic-vending": {
                "component": "mosaic_vending",
                "needs_run": true,
                "dependencies": ["mosaic-vending-ci"],
                "condition": "needs.mosaic-vending-ci.result == 'success'"
              },
              "mosaic-tile-e2e": {
                "component": "mosaic_tile",
                "needs_run": true,
                "dependencies": ["deploy-mosaic-tile"]
              },
              "mosaic-vending-e2e": {
                "component": "mosaic_vending",
                "needs_run": true,
                "dependencies": ["deploy-mosaic-vending"]
              },
              "full-e2e": {
                "component": null,
                "needs_run": ${{ needs.detect-changes.outputs.frontend_changes }} || ${{ needs.detect-changes.outputs.mosaic_tile_changes }} || ${{ needs.detect-changes.outputs.mosaic_vending_changes }},
                "dependencies": ["frontend-ci", "mosaic-tile-e2e", "mosaic-vending-e2e"]
              }
            },
            "metadata": {
              "commit_sha": "${{ github.sha }}",
              "workflow_id": "${{ github.run_id }}",
              "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
              "event_type": "${{ github.event_name }}"
            }
          }
          EOF
          )

          # Save plan to output
          echo "plan=$plan" >> $GITHUB_OUTPUT

          # Also save plan to artifact
          echo "$plan" > execution_plan.json

      - name: Upload execution plan
        uses: actions/upload-artifact@v3
        with:
          name: execution-plan
          path: execution_plan.json