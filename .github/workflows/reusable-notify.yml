---
name: Notify Status

on:
  workflow_call:
    inputs:
      execution_plan:
        required: true
        type: string
      frontend_ci_result:
        required: true
        type: string
      mosaic_tile_ci_result:
        required: true
        type: string
      mosaic_vending_ci_result:
        required: true
        type: string
      mosaic_tile_deploy_result:
        required: true
        type: string
      mosaic_vending_deploy_result:
        required: true
        type: string
      mosaic_tile_e2e_result:
        required: true
        type: string
      mosaic_vending_e2e_result:
        required: true
        type: string
      full_e2e_result:
        required: true
        type: string
      gist_id:
        required: true
        type: string
    secrets:
      DISCORD_WEBHOOK:
        required: true
      GIST_TOKEN:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Generate Status Message
        id: status
        shell: bash
        env:
          PLAN: ${{ inputs.execution_plan }}
          FRONTEND_CI_RESULT: ${{ inputs.frontend_ci_result }}
          MOSAIC_TILE_CI_RESULT: ${{ inputs.mosaic_tile_ci_result }}
          MOSAIC_VENDING_CI_RESULT: ${{ inputs.mosaic_vending_ci_result }}
          MOSAIC_TILE_DEPLOY_RESULT: ${{ inputs.mosaic_tile_deploy_result }}
          MOSAIC_VENDING_DEPLOY_RESULT: ${{ inputs.mosaic_vending_deploy_result }}
          MOSAIC_TILE_E2E_RESULT: ${{ inputs.mosaic_tile_e2e_result }}
          MOSAIC_VENDING_E2E_RESULT: ${{ inputs.mosaic_vending_e2e_result }}
          FULL_E2E_RESULT: ${{ inputs.full_e2e_result }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_RUN_ID: ${{ github.run_id }}
        run: |
          # Function to format job result
          format_job_result() {
            local job_name=$1
            local current_result=$2
            
            # Get job info from execution plan
            local job=$(echo "$PLAN" | jq -r ".jobs[\"$job_name\"]")
            local needs_run=$(echo "$job" | jq -r '.needs_run')
            local previous_result=$(echo "$job" | jq -r '.previous_result')
            local previous_deps=$(echo "$job" | jq -r '.previous_dependency_results')
            
            # Format current result
            local result_emoji
            case "$current_result" in
              "success") result_emoji="✅";;
              "failure") result_emoji="❌";;
              "cancelled") result_emoji="⚪";;
              "skipped") result_emoji="⏭️";;
              *) result_emoji="❓";;
            esac
            
            # Add previous result info if available
            local result_text="$result_emoji"
            if [[ "$needs_run" == "false" && "$previous_result" != "null" ]]; then
              # Get previous run info
              local component_name=$(echo "$job" | jq -r '.component')
              if [[ "$component_name" != "null" ]]; then
                local previous_run=$(echo "$PLAN" | jq -r ".components.$component_name.previous_run.run")
                if [[ "$previous_run" != "null" ]]; then
                  local run_url=$(echo "$previous_run" | jq -r '.url')
                  local run_date=$(echo "$previous_run" | jq -r '.created_at' | cut -d'T' -f1)
                  result_text+=" (reusing $run_date [run]($run_url))"
                fi
              fi
            fi
            
            echo "$result_text"
          }
          
          # Generate status message
          cat > message.md << 'STATUSMSG'
          # 🚀 Workflow Run Report

          `$(echo "$PLAN" | jq -r '.metadata.commit_sha')` • $(echo "$PLAN" | jq -r '.metadata.event_type') • `main` • [View Run](https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID)
          $(if [[ "$FRONTEND_CI_RESULT" == "success" && "$MOSAIC_TILE_CI_RESULT" == "success" && "$MOSAIC_VENDING_CI_RESULT" == "success" && "$FULL_E2E_RESULT" == "success" ]]; then echo "✅"; else echo "❌"; fi) Overall Status

          ## 🔍 Components

          ### 🎨 Frontend (`$(echo "$PLAN" | jq -r '.components.frontend.hash')`)
          $(if [[ "$(echo "$PLAN" | jq -r '.components.frontend.files_changed')" == "true" ]]; then
            echo "📝 Changes:"
            echo "$PLAN" | jq -r '.components.frontend.changed_files | map("- " + .) | join("\n")'
          else
            previous_run=$(echo "$PLAN" | jq -r '.components.frontend.previous_run')
            if [[ "$(echo "$previous_run" | jq -r '.found')" == "true" ]]; then
              echo "✨ No changes _(using $(echo "$previous_run.run" | jq -r '.created_at' | cut -d'T' -f1) [run]($(echo "$previous_run.run" | jq -r '.url')))_"
            else
              echo "🆕 First run"
            fi
          fi)

          **Pipeline:** $(if [[ "$(echo "$PLAN" | jq -r '.jobs.frontend-ci.needs_run')" == "false" ]]; then
            echo "✅ CI _(reused)_"
          else
            echo "CI: $(format_job_result "frontend-ci" "$FRONTEND_CI_RESULT")"
          fi)

          ### 🧩 Mosaic Tile (`$(echo "$PLAN" | jq -r '.components.mosaic_tile.hash')`)
          $(if [[ "$(echo "$PLAN" | jq -r '.components.mosaic_tile.files_changed')" == "true" ]]; then
            echo "📝 Changes:"
            echo "$PLAN" | jq -r '.components.mosaic_tile.changed_files | map("- " + .) | join("\n")'
          else
            previous_run=$(echo "$PLAN" | jq -r '.components.mosaic_tile.previous_run')
            if [[ "$(echo "$previous_run" | jq -r '.found')" == "true" ]]; then
              echo "✨ No changes _(using $(echo "$previous_run.run" | jq -r '.created_at' | cut -d'T' -f1) [run]($(echo "$previous_run.run" | jq -r '.url')))_"
            else
              echo "🆕 First run"
            fi
          fi)

          **Pipeline:** $(if [[ "$(echo "$PLAN" | jq -r '.jobs.mosaic-tile-ci.needs_run')" == "false" ]]; then
            echo "✅ CI _(reused)_ → "
          else
            echo "CI: $(format_job_result "mosaic-tile-ci" "$MOSAIC_TILE_CI_RESULT") → "
          fi)$(if [[ "$(echo "$PLAN" | jq -r '.jobs.deploy-mosaic-tile.needs_run')" == "false" ]]; then
            echo "✅ Deploy _(reused)_ → "
          else
            echo "Deploy: $(format_job_result "deploy-mosaic-tile" "$MOSAIC_TILE_DEPLOY_RESULT") → "
          fi)$(if [[ "$(echo "$PLAN" | jq -r '.jobs.mosaic-tile-e2e.needs_run')" == "false" ]]; then
            echo "✅ E2E _(reused)_"
          else
            echo "E2E: $(format_job_result "mosaic-tile-e2e" "$MOSAIC_TILE_E2E_RESULT")"
          fi)

          ### 🎲 Mosaic Vending (`$(echo "$PLAN" | jq -r '.components.mosaic_vending.hash')`)
          $(if [[ "$(echo "$PLAN" | jq -r '.components.mosaic_vending.files_changed')" == "true" ]]; then
            echo "📝 Changes:"
            echo "$PLAN" | jq -r '.components.mosaic_vending.changed_files | map("- " + .) | join("\n")'
          else
            previous_run=$(echo "$PLAN" | jq -r '.components.mosaic_vending.previous_run')
            if [[ "$(echo "$previous_run" | jq -r '.found')" == "true" ]]; then
              echo "✨ No changes _(using $(echo "$previous_run.run" | jq -r '.created_at' | cut -d'T' -f1) [run]($(echo "$previous_run.run" | jq -r '.url')))_"
            else
              echo "🆕 First run"
            fi
          fi)

          **Pipeline:** $(if [[ "$(echo "$PLAN" | jq -r '.jobs.mosaic-vending-ci.needs_run')" == "false" ]]; then
            echo "✅ CI _(reused)_ → "
          else
            echo "CI: $(format_job_result "mosaic-vending-ci" "$MOSAIC_VENDING_CI_RESULT") → "
          fi)$(if [[ "$(echo "$PLAN" | jq -r '.jobs.deploy-mosaic-vending.needs_run')" == "false" ]]; then
            echo "✅ Deploy _(reused)_ → "
          else
            echo "Deploy: $(format_job_result "deploy-mosaic-vending" "$MOSAIC_VENDING_DEPLOY_RESULT") → "
          fi)$(if [[ "$(echo "$PLAN" | jq -r '.jobs.mosaic-vending-e2e.needs_run')" == "false" ]]; then
            echo "✅ E2E _(reused)_"
          else
            echo "E2E: $(format_job_result "mosaic-vending-e2e" "$MOSAIC_VENDING_E2E_RESULT")"
          fi)

          ### 🔄 Integration
          **Full E2E:** $(if [[ "$(echo "$PLAN" | jq -r '.jobs.full-e2e.needs_run')" == "false" ]]; then
            echo "✅ _(no changes)_"
          else
            echo "$(format_job_result "full-e2e" "$FULL_E2E_RESULT")"
          fi)

          [View execution plan](https://gist.github.com/${{ inputs.gist_id }}/raw/execution_plan.json)
          STATUSMSG

          # Save message to output
          {
            echo 'message<<EOF'
            cat message.md
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: ${{ steps.status.outputs.message }}

      - name: Update Status Gist
        if: always()
        uses: fjogeleit/http-request-action@v1
        with:
          url: https://api.github.com/gists/${{ inputs.gist_id }}
          method: 'PATCH'
          bearerToken: ${{ secrets.GIST_TOKEN }}
          data: |
            {
              "files": {
                "status.md": {
                  "content": "${{ steps.status.outputs.message }}"
                },
                "execution_plan.json": {
                  "content": ${{ inputs.execution_plan }}
                }
              }
            }