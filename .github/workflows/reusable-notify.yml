name: Notify Status

on:
  workflow_call:
    inputs:
      execution_plan:
        required: true
        type: string
      frontend_ci_result:
        required: true
        type: string
      mosaic_tile_ci_result:
        required: true
        type: string
      mosaic_vending_ci_result:
        required: true
        type: string
      mosaic_tile_deploy_result:
        required: true
        type: string
      mosaic_vending_deploy_result:
        required: true
        type: string
      mosaic_tile_e2e_result:
        required: true
        type: string
      mosaic_vending_e2e_result:
        required: true
        type: string
      full_e2e_result:
        required: true
        type: string
    secrets:
      DISCORD_WEBHOOK:
        required: true
      GIST_TOKEN:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Generate Status Message
        id: status
        run: |
          # Parse execution plan
          plan='${{ inputs.execution_plan }}'
          
          # Function to format component status
          format_component_status() {
            local name=$1
            local component=$(echo "$plan" | jq -r ".components.$name")
            local hash=$(echo "$component" | jq -r '.hash')
            local files_changed=$(echo "$component" | jq -r '.files_changed')
            local previous_run=$(echo "$component" | jq -r '.previous_run')
            local has_previous=$(echo "$previous_run" | jq -r '.found')
            
            if [[ "$files_changed" == "true" ]]; then
              echo "üîÑ Changes detected"
            elif [[ "$has_previous" == "true" ]]; then
              local run_url=$(echo "$previous_run" | jq -r '.url')
              local created_at=$(echo "$previous_run" | jq -r '.created_at')
              echo "‚úÖ No changes (last success: $created_at - $run_url)"
            else
              echo "üÜï First run with this hash"
            fi
          }
          
          # Function to format job result
          format_job_result() {
            local result=$1
            case "$result" in
              "success") echo "‚úÖ";;
              "failure") echo "‚ùå";;
              "cancelled") echo "‚ö™";;
              "skipped") echo "‚è≠Ô∏è";;
              *) echo "‚ùì";;
            esac
          }
          
          # Generate component sections
          frontend_status=$(format_component_status "frontend")
          mosaic_tile_status=$(format_component_status "mosaic_tile")
          mosaic_vending_status=$(format_component_status "mosaic_vending")
          
          # Generate job results
          frontend_result=$(format_job_result "${{ inputs.frontend_ci_result }}")
          mosaic_tile_result=$(format_job_result "${{ inputs.mosaic_tile_ci_result }}")
          mosaic_vending_result=$(format_job_result "${{ inputs.mosaic_vending_ci_result }}")
          mosaic_tile_deploy_result=$(format_job_result "${{ inputs.mosaic_tile_deploy_result }}")
          mosaic_vending_deploy_result=$(format_job_result "${{ inputs.mosaic_vending_deploy_result }}")
          mosaic_tile_e2e_result=$(format_job_result "${{ inputs.mosaic_tile_e2e_result }}")
          mosaic_vending_e2e_result=$(format_job_result "${{ inputs.mosaic_vending_e2e_result }}")
          full_e2e_result=$(format_job_result "${{ inputs.full_e2e_result }}")
          
          # Create message
          message="üöÄ **Workflow Run Report**
          
          **Frontend**
          Status: $frontend_status
          CI: $frontend_result
          
          **Mosaic Tile**
          Status: $mosaic_tile_status
          CI: $mosaic_tile_result | Deploy: $mosaic_tile_deploy_result | E2E: $mosaic_tile_e2e_result
          
          **Mosaic Vending**
          Status: $mosaic_vending_status
          CI: $mosaic_vending_result | Deploy: $mosaic_vending_deploy_result | E2E: $mosaic_vending_e2e_result
          
          **Full E2E Tests**: $full_e2e_result
          
          **Run Details**
          Commit: \`$(echo "$plan" | jq -r '.metadata.commit_sha')\`
          Workflow: [#$(echo "$plan" | jq -r '.metadata.workflow_id')](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          Event: $(echo "$plan" | jq -r '.metadata.event_type')
          "
          
          # Save message
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Send Discord Notification
        if: always()
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: ${{ steps.status.outputs.message }}

      - name: Update Status Gist
        if: always()
        uses: exuanbo/actions-deploy-gist@v1
        with:
          token: ${{ secrets.GIST_TOKEN }}
          gist_id: YOUR_GIST_ID_HERE
          file_path: status.md
          file_type: text
          content: ${{ steps.status.outputs.message }}