name: Notifications

on:
  workflow_call:
    inputs:
      frontend_ci_result:
        required: true
        type: string
      mosaic_tile_ci_result:
        required: true
        type: string
      mosaic_vending_ci_result:
        required: true
        type: string
      mosaic_tile_e2e_result:
        required: true
        type: string
      mosaic_vending_e2e_result:
        required: true
        type: string
      full_e2e_result:
        required: true
        type: string
      mosaic_tile_deploy_result:
        required: true
        type: string
      mosaic_vending_deploy_result:
        required: true
        type: string
      frontend_hash:
        required: true
        type: string
        description: "Hash of frontend changes"
      mosaic_tile_hash:
        required: true
        type: string
        description: "Hash of mosaic-tile changes"
      mosaic_vending_hash:
        required: true
        type: string
        description: "Hash of mosaic-vending changes"
    secrets:
      DISCORD_WEBHOOK:
        required: true
      GIST_TOKEN:
        required: true

jobs:
  notify:
    runs-on: ubuntu-latest
    permissions:
      actions: read  # Required to read workflow runs
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to get all history

      - name: Send Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          GH_TOKEN: ${{ github.token }}
          FRONTEND_HASH: ${{ inputs.frontend_hash }}
          MOSAIC_TILE_HASH: ${{ inputs.mosaic_tile_hash }}
          MOSAIC_VENDING_HASH: ${{ inputs.mosaic_vending_hash }}
        run: |
          # Function to get status emoji
          get_status_emoji() {
            case "$1" in
              "success") echo "‚úÖ";;
              "failure") echo "‚ùå";;
              "cancelled") echo "‚ö†Ô∏è";;
              "skipped") echo "‚è≠Ô∏è";;
              *) echo "‚ùì";;
            esac
          }

          # Function to get run status message
          get_run_status() {
            local job_name=$1
            local result=$2
            local depends_on=$3  # Optional: job that this job depends on
            local component_hash=$4  # Optional: component hash for checking previous runs
            
            # For actually run jobs, show direct status
            if [[ "$result" != "skipped" ]]; then
              echo "$(get_status_emoji "$result") \`$result\`"
              return
            fi
            
            # For skipped jobs, determine why
            
            # Case 1: Dependency failure
            if [[ -n "$depends_on" && "${{ inputs[depends_on] }}" == "failure" ]]; then
              echo "‚è≠Ô∏è \`not run\` (previous step failed)"
              return
            fi
            
            # Case 2: Check if we have a hash to compare
            if [[ -z "$component_hash" ]]; then
              echo "‚ùå \`error\` (missing hash)"
              return
            fi
            
            # Case 3: Look for successful run with this exact hash
            local last_successful_run_with_hash=$(gh run list --workflow pixel-canvas.yml \
              --json conclusion,jobs,databaseId \
              --jq ".[] | select(.jobs[].name == \"$job_name\" and .conclusion == \"success\")" \
              --limit 10 | while read -r run; do
                run_id=$(echo "$run" | jq -r '.databaseId')
                run_hash=$(gh api "/repos/${{ github.repository }}/actions/runs/$run_id/jobs" \
                  --jq ".jobs[] | select(.name == \"check-needs-run\").steps[] | select(.name == \"Check if jobs need to run\").outputs.${component_hash}")
                
                if [[ "$run_hash" == "${!component_hash}" ]]; then
                  echo "found"
                  break
                fi
              done)
            
            # If we found a successful run with this hash, it's valid to skip
            if [[ -n "$last_successful_run_with_hash" ]]; then
              echo "‚úÖ \`not run\` (previously successful)"
            else
              echo "‚ùå \`error\` (should run - no success with current hash)"
            fi
          }

          # Overall status
          overall_status="success"
          for result in "${{ inputs.frontend_ci_result }}" "${{ inputs.mosaic_tile_ci_result }}" "${{ inputs.mosaic_vending_ci_result }}" "${{ inputs.mosaic_tile_deploy_result }}" "${{ inputs.mosaic_vending_deploy_result }}" "${{ inputs.mosaic_tile_e2e_result }}" "${{ inputs.mosaic_vending_e2e_result }}" "${{ inputs.full_e2e_result }}"; do
            if [[ "$result" == "failure" ]]; then
              overall_status="failure"
              break
            fi
          done

          # Build notification message
          message=$(cat << EOF
          **üöÄ Workflow Run: $([ "$overall_status" == "success" ] && echo "‚úÖ Success" || echo "‚ùå Failed")**

          **üî® Build & Test**
          ‚Ä¢ Frontend CI: $(get_run_status "frontend-ci" "${{ inputs.frontend_ci_result }}" "" "FRONTEND_HASH")
          ‚Ä¢ Mosaic Tile CI: $(get_run_status "mosaic-tile-ci" "${{ inputs.mosaic_tile_ci_result }}" "" "MOSAIC_TILE_HASH")
          ‚Ä¢ Mosaic Vending CI: $(get_run_status "mosaic-vending-ci" "${{ inputs.mosaic_vending_ci_result }}" "" "MOSAIC_VENDING_HASH")

          **üß™ Deployment**
          ‚Ä¢ Mosaic Tile: $(get_run_status "deploy-mosaic-tile" "${{ inputs.mosaic_tile_deploy_result }}" "mosaic_tile_ci_result" "MOSAIC_TILE_HASH")
          ‚Ä¢ Mosaic Vending: $(get_run_status "deploy-mosaic-vending" "${{ inputs.mosaic_vending_deploy_result }}" "mosaic_vending_ci_result" "MOSAIC_VENDING_HASH")

          **üß™ E2E Tests**
          ‚Ä¢ Mosaic Tile: $(get_run_status "mosaic-tile-e2e" "${{ inputs.mosaic_tile_e2e_result }}" "mosaic_tile_deploy_result" "MOSAIC_TILE_HASH")
          ‚Ä¢ Mosaic Vending: $(get_run_status "mosaic-vending-e2e" "${{ inputs.mosaic_vending_e2e_result }}" "mosaic_vending_deploy_result" "MOSAIC_VENDING_HASH")
          ‚Ä¢ Full E2E: $(get_run_status "full-e2e" "${{ inputs.full_e2e_result }}" "mosaic_vending_e2e_result")

          **üîó Links**
          ‚Ä¢ [View Run Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          ‚Ä¢ [View Changes](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
          EOF
          )

          # Escape the message for JSON
          message_escaped=$(echo "$message" | jq -R -s '.')

          # Send to Discord
          json_data=$(cat << EOF
          {
            "username": "GitHub Actions",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "embeds": [{
              "title": "üöÄ Workflow Run",
              "description": ${message_escaped},
              "color": $([ "$overall_status" == "success" ] && echo "5025616" || echo "15158332")
            }]
          }
          EOF
          )

          curl -H "Content-Type: application/json" -X POST -d "$json_data" $DISCORD_WEBHOOK 